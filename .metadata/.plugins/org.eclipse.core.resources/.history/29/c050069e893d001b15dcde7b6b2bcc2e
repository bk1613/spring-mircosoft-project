package com.hackerrank.files.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.hackerrank.files.model.XFile;
import com.hackerrank.files.repository.XFileRepository;

@Controller
public class RequestController {
	private static final Logger logger = LoggerFactory.getLogger(RequestController.class);

	@Autowired
	private XFileRepository xFileRepository;

	@PostMapping("/uploader")
	public ResponseEntity<HttpStatus> uploadFile(@RequestParam("fileGroup") String fileGroup, @RequestParam("files") MultipartFile files) {
		String fileName = StringUtils.cleanPath(files.getOriginalFilename());
		try {
			if (files.getSize() / 1024 > 100) {
				return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
			XFile xFile = xFileRepository.findByFileGroupAndFileName(fileGroup, fileName);
			if(xFile == null) {
				xFile = new XFile();
			}
			xFile.setFileGroup(fileGroup);
			xFile.setFileName(fileName);
			xFile.setFile(files.getBytes());
			xFileRepository.save(xFile);
			
		} catch (IOException ex) {
			logger.error("Could not save file " + fileName + ". Please try again!", ex);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		catch (Exception ex) {
			logger.error("Could not save file " + fileName + ". Please try again!", ex);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<>(HttpStatus.CREATED);
	}


	@GetMapping("/downloader")
	public ResponseEntity<?> downloadFile(@PathVariable String fileGroup) {
		List<XFile> listXFiles = xFileRepository.findByFileGroup(fileGroup);

		if(listXFiles != null && !listXFiles.isEmpty()) {
			if(listXFiles.size() > 1) {
				FileOutputStream fos = null;
				File zip = new File(fileGroup + ".zip");
				
				try {
					fos = new FileOutputStream(zip);
					ZipOutputStream zos = new ZipOutputStream(fos);
					for(XFile xFile: listXFiles) {
						zos.putNextEntry(new ZipEntry(xFile.getFileName()));
						zos.write(xFile.getFile());
						zos.closeEntry();
					}
					zos.close();
					return new ResponseEntity<>(zos, HttpStatus.OK);
				} catch (FileNotFoundException ex) {
					logger.error("File Group not found " + fileGroup, ex);
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}catch (IOException ex) {
					logger.error("File Group not found " + fileGroup, ex);
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}finally {
					
				}
			}
		}
		return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		
		
	}
}
